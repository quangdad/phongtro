{"ast":null,"code":"import { Buffer } from \"buffer\";\nexport const fileToBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = error => reject(error);\n});\nexport const blobToBase64 = blob => {\n  if (blob) return new Buffer(blob, 'base64').toString('binary');else return false;\n};","map":{"version":3,"names":["Buffer","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","blobToBase64","blob","toString"],"sources":["F:/PHONGTRO2/PHONGTRO/client/src/ultils/Common/tobase64.js"],"sourcesContent":["import { Buffer } from \"buffer\";\r\n\r\nexport const fileToBase64 = file => new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n});\r\n\r\nexport const blobToBase64 = blob => {\r\n    if (blob) return new Buffer(blob, 'base64').toString('binary')\r\n    else return false\r\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,OAAO,MAAMC,YAAY,GAAGC,IAAI,IAAI,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EACjE,MAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;EACAD,MAAM,CAACE,aAAP,CAAqBN,IAArB;;EACAI,MAAM,CAACG,MAAP,GAAgB,MAAML,OAAO,CAACE,MAAM,CAACI,MAAR,CAA7B;;EACAJ,MAAM,CAACK,OAAP,GAAiBC,KAAK,IAAIP,MAAM,CAACO,KAAD,CAAhC;AACH,CALmC,CAA7B;AAOP,OAAO,MAAMC,YAAY,GAAGC,IAAI,IAAI;EAChC,IAAIA,IAAJ,EAAU,OAAO,IAAId,MAAJ,CAAWc,IAAX,EAAiB,QAAjB,EAA2BC,QAA3B,CAAoC,QAApC,CAAP,CAAV,KACK,OAAO,KAAP;AACR,CAHM"},"metadata":{},"sourceType":"module"}