{"ast":null,"code":"import actionTypes from './actionTypes';\nimport * as apis from '../../services';\nexport const getCategories = () => async dispatch => {\n  try {\n    const response = await apis.apiGetCategories();\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      dispatch({\n        type: actionTypes.GET_CATEGORIES,\n        categories: response.data.response\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_CATEGORIES,\n        msg: response.data.msg,\n        categories: null\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_CATEGORIES,\n      categories: null\n    });\n  }\n};\nexport const getPrices = () => async dispatch => {\n  try {\n    const response = await apis.apiGetPrices();\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      dispatch({\n        type: actionTypes.GET_PRICES,\n        prices: response.data.response.sort((a, b) => {\n          return +a.order - +b.order;\n        }),\n        msg: ''\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_PRICES,\n        msg: response.data.msg,\n        prices: null\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_PRICES,\n      prices: null,\n      msg: error\n    });\n  }\n};\nexport const getAreas = () => async dispatch => {\n  try {\n    const response = await apis.apiGetAreas();\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      dispatch({\n        type: actionTypes.GET_AREAS,\n        areas: response.data.response.sort((a, b) => {\n          return +a.order - +b.order;\n        }),\n        msg: ''\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_AREAS,\n        msg: response.data.msg,\n        areas: null\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_AREAS,\n      areas: null,\n      msg: error\n    });\n  }\n};\nexport const getProvinces = () => async dispatch => {\n  try {\n    const response = await apis.apiGetProvinces();\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      dispatch({\n        type: actionTypes.GET_PROVINCES,\n        provinces: response.data.response,\n        msg: ''\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_PROVINCES,\n        msg: response.data.msg,\n        provinces: null\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_PROVINCES,\n      provinces: null,\n      msg: ''\n    });\n  }\n};","map":{"version":3,"names":["actionTypes","apis","getCategories","dispatch","response","apiGetCategories","data","err","type","GET_CATEGORIES","categories","msg","error","getPrices","apiGetPrices","GET_PRICES","prices","sort","a","b","order","getAreas","apiGetAreas","GET_AREAS","areas","getProvinces","apiGetProvinces","GET_PROVINCES","provinces"],"sources":["F:/PHONGTRO2/PHONGTRO/client/src/store/actions/app.js"],"sourcesContent":["import actionTypes from './actionTypes'\r\nimport * as apis from '../../services'\r\n\r\n\r\nexport const getCategories = () => async (dispatch) => {\r\n    try {\r\n        const response = await apis.apiGetCategories()\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_CATEGORIES,\r\n                categories: response.data.response\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_CATEGORIES,\r\n                msg: response.data.msg,\r\n                categories: null\r\n            })\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_CATEGORIES,\r\n            categories: null\r\n        })\r\n    }\r\n}\r\nexport const getPrices = () => async (dispatch) => {\r\n    try {\r\n        const response = await apis.apiGetPrices()\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_PRICES,\r\n                prices: response.data.response.sort((a, b) => { return +a.order - +b.order }),\r\n                msg: ''\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_PRICES,\r\n                msg: response.data.msg,\r\n                prices: null\r\n            })\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_PRICES,\r\n            prices: null,\r\n            msg: error\r\n        })\r\n    }\r\n}\r\nexport const getAreas = () => async (dispatch) => {\r\n    try {\r\n        const response = await apis.apiGetAreas()\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_AREAS,\r\n                areas: response.data.response.sort((a, b) => { return +a.order - +b.order }),\r\n                msg: ''\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_AREAS,\r\n                msg: response.data.msg,\r\n                areas: null\r\n            })\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_AREAS,\r\n            areas: null,\r\n            msg: error\r\n        })\r\n    }\r\n}\r\nexport const getProvinces = () => async (dispatch) => {\r\n    try {\r\n        const response = await apis.apiGetProvinces()\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_PROVINCES,\r\n                provinces: response.data.response,\r\n                msg: ''\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_PROVINCES,\r\n                msg: response.data.msg,\r\n                provinces: null\r\n            })\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_PROVINCES,\r\n            provinces: null,\r\n            msg: ''\r\n        })\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAO,KAAKC,IAAZ,MAAsB,gBAAtB;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAOC,QAAP,IAAoB;EACnD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACI,gBAAL,EAAvB;;IACA,IAAI,CAAAD,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,IAAV,CAAeC,GAAf,MAAuB,CAA3B,EAA8B;MAC1BJ,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAACS,cADb;QAELC,UAAU,EAAEN,QAAQ,CAACE,IAAT,CAAcF;MAFrB,CAAD,CAAR;IAIH,CALD,MAKO;MACHD,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAACS,cADb;QAELE,GAAG,EAAEP,QAAQ,CAACE,IAAT,CAAcK,GAFd;QAGLD,UAAU,EAAE;MAHP,CAAD,CAAR;IAKH;EACJ,CAdD,CAcE,OAAOE,KAAP,EAAc;IACZT,QAAQ,CAAC;MACLK,IAAI,EAAER,WAAW,CAACS,cADb;MAELC,UAAU,EAAE;IAFP,CAAD,CAAR;EAIH;AACJ,CArBM;AAsBP,OAAO,MAAMG,SAAS,GAAG,MAAM,MAAOV,QAAP,IAAoB;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACa,YAAL,EAAvB;;IACA,IAAI,CAAAV,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,IAAV,CAAeC,GAAf,MAAuB,CAA3B,EAA8B;MAC1BJ,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAACe,UADb;QAELC,MAAM,EAAEZ,QAAQ,CAACE,IAAT,CAAcF,QAAd,CAAuBa,IAAvB,CAA4B,CAACC,CAAD,EAAIC,CAAJ,KAAU;UAAE,OAAO,CAACD,CAAC,CAACE,KAAH,GAAW,CAACD,CAAC,CAACC,KAArB;QAA4B,CAApE,CAFH;QAGLT,GAAG,EAAE;MAHA,CAAD,CAAR;IAKH,CAND,MAMO;MACHR,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAACe,UADb;QAELJ,GAAG,EAAEP,QAAQ,CAACE,IAAT,CAAcK,GAFd;QAGLK,MAAM,EAAE;MAHH,CAAD,CAAR;IAKH;EACJ,CAfD,CAeE,OAAOJ,KAAP,EAAc;IACZT,QAAQ,CAAC;MACLK,IAAI,EAAER,WAAW,CAACe,UADb;MAELC,MAAM,EAAE,IAFH;MAGLL,GAAG,EAAEC;IAHA,CAAD,CAAR;EAKH;AACJ,CAvBM;AAwBP,OAAO,MAAMS,QAAQ,GAAG,MAAM,MAAOlB,QAAP,IAAoB;EAC9C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACqB,WAAL,EAAvB;;IACA,IAAI,CAAAlB,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,IAAV,CAAeC,GAAf,MAAuB,CAA3B,EAA8B;MAC1BJ,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAACuB,SADb;QAELC,KAAK,EAAEpB,QAAQ,CAACE,IAAT,CAAcF,QAAd,CAAuBa,IAAvB,CAA4B,CAACC,CAAD,EAAIC,CAAJ,KAAU;UAAE,OAAO,CAACD,CAAC,CAACE,KAAH,GAAW,CAACD,CAAC,CAACC,KAArB;QAA4B,CAApE,CAFF;QAGLT,GAAG,EAAE;MAHA,CAAD,CAAR;IAKH,CAND,MAMO;MACHR,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAACuB,SADb;QAELZ,GAAG,EAAEP,QAAQ,CAACE,IAAT,CAAcK,GAFd;QAGLa,KAAK,EAAE;MAHF,CAAD,CAAR;IAKH;EACJ,CAfD,CAeE,OAAOZ,KAAP,EAAc;IACZT,QAAQ,CAAC;MACLK,IAAI,EAAER,WAAW,CAACuB,SADb;MAELC,KAAK,EAAE,IAFF;MAGLb,GAAG,EAAEC;IAHA,CAAD,CAAR;EAKH;AACJ,CAvBM;AAwBP,OAAO,MAAMa,YAAY,GAAG,MAAM,MAAOtB,QAAP,IAAoB;EAClD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACyB,eAAL,EAAvB;;IACA,IAAI,CAAAtB,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,IAAV,CAAeC,GAAf,MAAuB,CAA3B,EAA8B;MAC1BJ,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAAC2B,aADb;QAELC,SAAS,EAAExB,QAAQ,CAACE,IAAT,CAAcF,QAFpB;QAGLO,GAAG,EAAE;MAHA,CAAD,CAAR;IAKH,CAND,MAMO;MACHR,QAAQ,CAAC;QACLK,IAAI,EAAER,WAAW,CAAC2B,aADb;QAELhB,GAAG,EAAEP,QAAQ,CAACE,IAAT,CAAcK,GAFd;QAGLiB,SAAS,EAAE;MAHN,CAAD,CAAR;IAKH;EACJ,CAfD,CAeE,OAAOhB,KAAP,EAAc;IACZT,QAAQ,CAAC;MACLK,IAAI,EAAER,WAAW,CAAC2B,aADb;MAELC,SAAS,EAAE,IAFN;MAGLjB,GAAG,EAAE;IAHA,CAAD,CAAR;EAKH;AACJ,CAvBM"},"metadata":{},"sourceType":"module"}