{"ast":null,"code":"import actionTypes from './actionTypes';\nimport { apiGetNewPosts, apiGetPosts, apiGetPostsLimit, apiGetPostsLimitAdmin } from '../../services/post';\nexport const getPosts = () => async dispatch => {\n  try {\n    const response = await apiGetPosts();\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      dispatch({\n        type: actionTypes.GET_POSTS,\n        posts: response.data.response\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_POSTS,\n        msg: response.data.msg\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_POSTS,\n      posts: null\n    });\n  }\n};\nexport const getPostsLimit = query => async dispatch => {\n  try {\n    const response = await apiGetPostsLimit(query);\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      var _response$data$respon, _response$data$respon2;\n\n      dispatch({\n        type: actionTypes.GET_POSTS_LIMIT,\n        posts: (_response$data$respon = response.data.response) === null || _response$data$respon === void 0 ? void 0 : _response$data$respon.rows,\n        count: (_response$data$respon2 = response.data.response) === null || _response$data$respon2 === void 0 ? void 0 : _response$data$respon2.count\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_POSTS_LIMIT,\n        msg: response.data.msg\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_POSTS_LIMIT,\n      posts: null\n    });\n  }\n};\nexport const getNewPosts = () => async dispatch => {\n  try {\n    const response = await apiGetNewPosts();\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      dispatch({\n        type: actionTypes.GET_NEW_POST,\n        newPosts: response.data.response\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_NEW_POST,\n        msg: response.data.msg,\n        newPosts: null\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_NEW_POST,\n      newPosts: null\n    });\n  }\n};\nexport const getOutStandingPost = () => async dispatch => {\n  try {\n    const response = await apiGetPostsLimit({\n      limitPost: 10,\n      order: ['star', 'DESC']\n    });\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      dispatch({\n        type: actionTypes.GET_OUTSTANDING,\n        outStandingPost: response.data.response.rows\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_OUTSTANDING,\n        msg: response.data.msg,\n        outStandingPost: null\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_OUTSTANDING,\n      outStandingPost: null\n    });\n  }\n};\nexport const getPostsLimitAdmin = query => async dispatch => {\n  try {\n    const response = await apiGetPostsLimitAdmin(query);\n\n    if ((response === null || response === void 0 ? void 0 : response.data.err) === 0) {\n      var _response$data$respon3, _response$data$respon4;\n\n      dispatch({\n        type: actionTypes.GET_POSTS_ADMIN,\n        posts: (_response$data$respon3 = response.data.response) === null || _response$data$respon3 === void 0 ? void 0 : _response$data$respon3.rows,\n        count: (_response$data$respon4 = response.data.response) === null || _response$data$respon4 === void 0 ? void 0 : _response$data$respon4.count\n      });\n    } else {\n      dispatch({\n        type: actionTypes.GET_POSTS_ADMIN,\n        msg: response.data.msg,\n        posts: null\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: actionTypes.GET_POSTS_ADMIN,\n      posts: null\n    });\n  }\n};\nexport const editData = dataEdit => ({\n  type: actionTypes.EDIT_DATA,\n  dataEdit\n});\nexport const resetDataEdit = () => ({\n  type: actionTypes.RESET_DATAEDIT\n});","map":{"version":3,"names":["actionTypes","apiGetNewPosts","apiGetPosts","apiGetPostsLimit","apiGetPostsLimitAdmin","getPosts","dispatch","response","data","err","type","GET_POSTS","posts","msg","error","getPostsLimit","query","GET_POSTS_LIMIT","rows","count","getNewPosts","GET_NEW_POST","newPosts","getOutStandingPost","limitPost","order","GET_OUTSTANDING","outStandingPost","getPostsLimitAdmin","GET_POSTS_ADMIN","editData","dataEdit","EDIT_DATA","resetDataEdit","RESET_DATAEDIT"],"sources":["F:/PHONGTRO2/PHONGTRO/client/src/store/actions/post.js"],"sourcesContent":["import actionTypes from './actionTypes'\r\nimport { apiGetNewPosts, apiGetPosts, apiGetPostsLimit, apiGetPostsLimitAdmin } from '../../services/post'\r\n\r\nexport const getPosts = () => async (dispatch) => {\r\n    try {\r\n        const response = await apiGetPosts()\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_POSTS,\r\n                posts: response.data.response\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_POSTS,\r\n                msg: response.data.msg\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_POSTS,\r\n            posts: null\r\n        })\r\n    }\r\n}\r\nexport const getPostsLimit = (query) => async (dispatch) => {\r\n    try {\r\n        const response = await apiGetPostsLimit(query)\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_POSTS_LIMIT,\r\n                posts: response.data.response?.rows,\r\n                count: response.data.response?.count\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_POSTS_LIMIT,\r\n                msg: response.data.msg\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_POSTS_LIMIT,\r\n            posts: null\r\n        })\r\n    }\r\n}\r\nexport const getNewPosts = () => async (dispatch) => {\r\n    try {\r\n        const response = await apiGetNewPosts()\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_NEW_POST,\r\n                newPosts: response.data.response,\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_NEW_POST,\r\n                msg: response.data.msg,\r\n                newPosts: null\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_NEW_POST,\r\n            newPosts: null\r\n        })\r\n    }\r\n}\r\nexport const getOutStandingPost = () => async (dispatch) => {\r\n    try {\r\n        const response = await apiGetPostsLimit({\r\n            limitPost: 10,\r\n            order: ['star', 'DESC']\r\n        })\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_OUTSTANDING,\r\n                outStandingPost: response.data.response.rows,\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_OUTSTANDING,\r\n                msg: response.data.msg,\r\n                outStandingPost: null\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_OUTSTANDING,\r\n            outStandingPost: null\r\n        })\r\n    }\r\n}\r\nexport const getPostsLimitAdmin = (query) => async (dispatch) => {\r\n    try {\r\n        const response = await apiGetPostsLimitAdmin(query)\r\n        if (response?.data.err === 0) {\r\n            dispatch({\r\n                type: actionTypes.GET_POSTS_ADMIN,\r\n                posts: response.data.response?.rows,\r\n                count: response.data.response?.count\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: actionTypes.GET_POSTS_ADMIN,\r\n                msg: response.data.msg,\r\n                posts: null\r\n            })\r\n        }\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: actionTypes.GET_POSTS_ADMIN,\r\n            posts: null\r\n        })\r\n    }\r\n}\r\nexport const editData = (dataEdit) => ({\r\n    type: actionTypes.EDIT_DATA,\r\n    dataEdit\r\n})\r\nexport const resetDataEdit = () => ({\r\n    type: actionTypes.RESET_DATAEDIT\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}